/* Generated by re2j 0.13.6.dev on Mon Jul 13 18:31:58 2009 */
package org.yecht;

import java.io.IOException;

// Equivalent to token.re
public class TokenScanner implements YAMLGrammarTokens, Scanner {
   private Parser parser;

   private Object lval;
   private int currentToken = -1;

   public static void error(String msg, Parser parser) {
   }

   public static Scanner createScanner(Parser parser) {
     switch(parser.input_type) {
       case YAML_UTF8:
         return new TokenScanner(parser);
       case Bytecode_UTF8:
         // TODO: fix
         return null;
       case YAML_UTF16:
         error("UTF-16 is not currently supported in Yecht.\nPlease contribute code to help this happen!", parser);
         return null;
       case YAML_UTF32:
         error("UTF-32 is not currently supported in Yecht.\nPlease contribute code to help this happen!", parser);
         return null;
     }
     return null;
   }

   public TokenScanner(Parser parser) {
     this.parser = parser;
   }

   public Object getLVal() {
     return lval;
   }

   public int currentToken() {
     return currentToken;
   }

   public int yylex() {
     try {
          currentToken = real_yylex();
          return currentToken;
     } catch(java.io.IOException ioe) {
          throw new RuntimeException(ioe);
     }
   }

   private int isNewline(int ptr) {
     return newlineLen(ptr);
   }

   private int newlineLen(int ptr) {
     if(parser.buffer.buffer[ptr] == '\n')
       return 1;

     if(parser.buffer.buffer[ptr] == '\r' && parser.buffer.buffer[ptr+1] == '\n')
       return 2;
       
     return 0;
   }

   private void NEWLINE(int ptr) {
     parser.lineptr = ptr + newlineLen(ptr);
     if(parser.lineptr > parser.linectptr) {
       parser.linect++;
       parser.linectptr = parser.lineptr;
     }
   }

   private final static int Header = 1;
   private final static int Document = 2;
   private final static int Directive = 3;
   private final static int Plain = 4;
   private final static int Plain2 = 5;
   private final static int Plain3 = 6;
   private final static int SingleQuote = 7;
   private final static int SingleQuote2 = 8;
   private final static int DoubleQuote = 9;
   private final static int DoubleQuote2 = 10;
   private final static int TransferMethod = 11;
   private final static int TransferMethod2 = 12;
   private final static int ScalarBlock = 13;
   private final static int ScalarBlock2 = 14;

   private void YYPOS(int n) {
       parser.cursor = parser.token + n;
   }

   private int real_yylex() throws IOException {
     int doc_level = 0;
     if(parser.cursor == -1) {
       parser.read();
     }

     if(parser.force_token != 0) {
       int t = parser.force_token;
       parser.force_token = 0;
       return t;
     }


        int mainLoopGoto = Header;
        if( parser.lineptr != parser.cursor ) {
            mainLoopGoto = Document;
        }

        do {
            gotoSomething: while(true) {
                switch(mainLoopGoto) {
                case Header: {
                    parser.token = parser.cursor;

        int gotoPoint = -1;
        byte yych = (byte) 0;
        int yyaccept = 0;
        while(true) {
            gotoNext: while(true) {
                switch(gotoPoint) {
                case -1: 

                    if ((parser.limit - parser.cursor) < 5) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case 0x00:    gotoPoint = 7; break gotoNext;
                    case '\t':
                    case ' ':    gotoPoint = 12; break gotoNext;
                    case '\n':    gotoPoint = 9; break gotoNext;
                    case '\r':    gotoPoint = 11; break gotoNext;
                    case '#':    gotoPoint = 5; break gotoNext;
                    case '-':    gotoPoint = 2; break gotoNext;
                    case '.':    gotoPoint = 4; break gotoNext;
                    default:    gotoPoint = 14; break gotoNext;
                    }
                case 2:
                    yyaccept = 0;
                    yych = parser.buffer.buffer[(parser.marker = ++parser.cursor)];
                    switch (yych) {
                    case '-':    gotoPoint = 30; break gotoNext;
                    default:    gotoPoint = 3; break gotoNext;
                    }
                case 3:
                    {   YYPOS(0);
                        mainLoopGoto = Document; break gotoSomething;
                    }
                case 4:
                    yyaccept = 0;
                    yych = parser.buffer.buffer[(parser.marker = ++parser.cursor)];
                    switch (yych) {
                    case '.':    gotoPoint = 23; break gotoNext;
                    default:    gotoPoint = 3; break gotoNext;
                    }
                case 5:
                    ++parser.cursor;
                    {   eatComments(); 
                        mainLoopGoto = Header; break gotoSomething;
                    }
                case 7:
                    ++parser.cursor;
                    {   Level lvl = parser.currentLevel();
                        if(lvl.spaces > -1) {
                            parser.popLevel();
                            YYPOS(0);
                            return YAML_IEND;
                        }
                        YYPOS(0);
                        return 0; 
                    }
                case 9:
                    yyaccept = 1;
                    yych = parser.buffer.buffer[(parser.marker = ++parser.cursor)];
                    gotoPoint = 18; break gotoNext;
                case 10:
                    {
                        int indent = parser.token;
                        NEWLINE(indent);
                        while(indent < parser.cursor) {
                          if(parser.buffer.buffer[indent] == '\t') {
                            error("TAB found in your indentation, please remove",parser);
                          } else if(isNewline(++indent) != 0) {
                            NEWLINE(indent);
                          }
                        }
                        doc_level = 0;
                        if(parser.buffer.buffer[parser.cursor] == 0) {
                          doc_level = -1;
                          parser.token = parser.cursor-1;
                        } else if(parser.buffer.buffer[parser.lineptr] == ' ') {
                          doc_level = parser.cursor - parser.lineptr;
                        }
                        mainLoopGoto = Header; break gotoSomething;
                    }
                case 11:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 17; break gotoNext;
                    default:    gotoPoint = 3; break gotoNext;
                    }
                case 12:
                    ++parser.cursor;
                    yych = parser.buffer.buffer[parser.cursor];
                    gotoPoint = 16; break gotoNext;
                case 13:
                    {   doc_level = parser.cursor - parser.lineptr;
                        mainLoopGoto = Header; break gotoSomething;
                    }
                case 14:
                    yych = parser.buffer.buffer[++parser.cursor];
                    gotoPoint = 3; break gotoNext;
                case 15:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                case 16:
                    switch (yych) {
                    case '\t':
                    case ' ':    gotoPoint = 15; break gotoNext;
                    default:    gotoPoint = 13; break gotoNext;
                    }
                case 17:
                    yyaccept = 1;
                    parser.marker = ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                case 18:
                    switch (yych) {
                    case '\t':    gotoPoint = 17; break gotoNext;
                    case '\n':
                    case ' ':    gotoPoint = 19; break gotoNext;
                    case '\r':    gotoPoint = 21; break gotoNext;
                    default:    gotoPoint = 10; break gotoNext;
                    }
                case 19:
                    yyaccept = 1;
                    parser.marker = ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case '\n':
                    case ' ':    gotoPoint = 19; break gotoNext;
                    case '\r':    gotoPoint = 21; break gotoNext;
                    default:    gotoPoint = 10; break gotoNext;
                    }
                case 21:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 19; break gotoNext;
                    default:    gotoPoint = 22; break gotoNext;
                    }
                case 22:
                    parser.cursor = parser.marker;
                    if (yyaccept == 0) {
                        gotoPoint = 3; break gotoNext;
                    } else {
                        gotoPoint = 10; break gotoNext;
                    }
                case 23:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '.':    gotoPoint = 24; break gotoNext;
                    default:    gotoPoint = 22; break gotoNext;
                    }
                case 24:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 25; break gotoNext;
                    case '\r':    gotoPoint = 29; break gotoNext;
                    case ' ':    gotoPoint = 27; break gotoNext;
                    default:    gotoPoint = 22; break gotoNext;
                    }
                case 25:
                    ++parser.cursor;
                case 26:
                    {   Level lvl = parser.currentLevel();
                        if(lvl.status == LevelStatus.header) {
                          mainLoopGoto = Header; break gotoSomething;
                        } else {
                          if(lvl.spaces > -1) {
                            parser.popLevel();
                            YYPOS(0);
                            return YAML_IEND;
                          }
                          YYPOS(0);
                          return 0; 
                        }
                    }
                case 27:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case ' ':    gotoPoint = 27; break gotoNext;
                    default:    gotoPoint = 26; break gotoNext;
                    }
                case 29:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 25; break gotoNext;
                    default:    gotoPoint = 22; break gotoNext;
                    }
                case 30:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '-':    gotoPoint = 31; break gotoNext;
                    default:    gotoPoint = 22; break gotoNext;
                    }
                case 31:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 32; break gotoNext;
                    case '\r':    gotoPoint = 36; break gotoNext;
                    case ' ':    gotoPoint = 34; break gotoNext;
                    default:    gotoPoint = 22; break gotoNext;
                    }
                case 32:
                    ++parser.cursor;
                case 33:
                    { Level lvl = parser.currentLevel();
                      if(lvl.status == LevelStatus.header) {
                          YYPOS(3);
                          mainLoopGoto = Directive; break gotoSomething;
                      } else {
                          if(lvl.spaces > -1) {
                              parser.popLevel();
                              YYPOS(0);
                              return YAML_IEND;
                          }
                          YYPOS(0);
                          return 0;
                      }
                    }
                case 34:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case ' ':    gotoPoint = 34; break gotoNext;
                    default:    gotoPoint = 33; break gotoNext;
                    }
                case 36:
                    ++parser.cursor;
                    switch ((yych = parser.buffer.buffer[parser.cursor])) {
                    case '\n':    gotoPoint = 32; break gotoNext;
                    default:    gotoPoint = 22; break gotoNext;
                    }
                }
            }
        }

                }
                case Document: {
                    Level lvl = parser.currentLevel();
                    if(lvl.status == LevelStatus.header) {
                      lvl.status = LevelStatus.doc;
                    }

                    parser.token = parser.cursor;


        int gotoPoint = -1;
        byte yych = (byte) 0;
        int yyaccept = 0;
        while(true) {
            gotoNext: while(true) {
                switch(gotoPoint) {
                case -1: 
                    if ((parser.limit - parser.cursor) < 3) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case 0x00:    gotoPoint = 64; break gotoNext;
                    case '\t':
                    case ' ':    gotoPoint = 62; break gotoNext;
                    case '\n':    gotoPoint = 39; break gotoNext;
                    case '\r':    gotoPoint = 41; break gotoNext;
                    case '!':    gotoPoint = 53; break gotoNext;
                    case '"':    gotoPoint = 57; break gotoNext;
                    case '#':    gotoPoint = 60; break gotoNext;
                    case '&':    gotoPoint = 51; break gotoNext;
                    case '\'':    gotoPoint = 55; break gotoNext;
                    case '*':    gotoPoint = 52; break gotoNext;
                    case ',':
                    case ':':    gotoPoint = 49; break gotoNext;
                    case '-':
                    case '?':    gotoPoint = 50; break gotoNext;
                    case '>':
                    case '|':    gotoPoint = 59; break gotoNext;
                    case '[':    gotoPoint = 43; break gotoNext;
                    case ']':
                    case '}':    gotoPoint = 47; break gotoNext;
                    case '{':    gotoPoint = 45; break gotoNext;
                    default:    gotoPoint = 66; break gotoNext;
                    }
                case 39:
                    yyaccept = 0;
                    yych = parser.buffer.buffer[(parser.marker = ++parser.cursor)];
                    gotoPoint = 94; break gotoNext;
                case 40:
                    {   /* Isolate spaces */
                        int indt_len;
                        int indent = parser.token;
                        NEWLINE(indent);
                        while(indent < parser.cursor) {
                          if(parser.buffer.buffer[indent] == '\t') {
                            error("TAB found in your indentation, please remove",parser);
                          } else if(isNewline(++indent) != 0) {
                            NEWLINE(indent);
                          }
                        }
                        indt_len = 0;
                        if(parser.buffer.buffer[parser.cursor] == 0) {
                          indt_len = -1;
                          parser.token = parser.cursor-1;
                        } else if(parser.buffer.buffer[parser.lineptr] == ' ') {
                          indt_len = parser.cursor - parser.lineptr;
                        }

                        lvl = parser.currentLevel();
                        doc_level = 0;

                        /* XXX: Comment lookahead */
                        if( parser.buffer.buffer[parser.cursor] == '#' ) {
                            mainLoopGoto = Document; break gotoSomething;
                        }

                        /* Ignore indentation inside inlines */
                        if( lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap ) {
                            mainLoopGoto = Document; break gotoSomething;
                        }

                        /* Check for open indent */
                        if(lvl.spaces > indt_len) {
                           parser.popLevel();
                           YYPOS(0);
                           return YAML_IEND;
                        }
                        if(lvl.spaces < indt_len) {
                            if(lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap) {
                                mainLoopGoto = Document; break gotoSomething;
                            } else {
                                parser.addLevel(indt_len, LevelStatus.doc);
                                return YAML_IOPEN;
                            }
                        }
                        if(indt_len == -1) {
                            return 0;
                        }
                        return YAML_INDENT;
                    }
                case 41:
                    ++parser.cursor;
                    switch ((yych = parser.buffer.buffer[parser.cursor])) {
                    case '\n':    gotoPoint = 93; break gotoNext;
                    default:    gotoPoint = 42; break gotoNext;
                    }
                case 42:
                    {   
                        if(lvl.spaces < doc_level) {
                            if(lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap) {
                                mainLoopGoto = Document; break gotoSomething;
                            } else {
                                parser.addLevel(doc_level, LevelStatus.doc);
                                YYPOS(0);
                                return YAML_IOPEN;
                            }
                        }
                        mainLoopGoto = Plain; break gotoSomething;
                    }
                case 43:
                    ++parser.cursor;
                    {   
                        if(lvl.spaces < doc_level) {
                            if(lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap) {
                                mainLoopGoto = Document; break gotoSomething;
                            } else {
                                parser.addLevel(doc_level, LevelStatus.doc);
                                YYPOS(0);
                                return YAML_IOPEN;
                            }
                        }
                        lvl = parser.currentLevel();
                        parser.addLevel(lvl.spaces + 1, LevelStatus.iseq);
                        return parser.buffer.buffer[parser.token];
                    }
                case 45:
                    ++parser.cursor;
                    {
                        if(lvl.spaces < doc_level) {
                            if(lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap) {
                                mainLoopGoto = Document; break gotoSomething;
                            } else {
                                parser.addLevel(doc_level, LevelStatus.doc);
                                YYPOS(0);
                                return YAML_IOPEN;
                            }
                        }
                        lvl = parser.currentLevel();
                        parser.addLevel(lvl.spaces + 1, LevelStatus.imap);
                        return parser.buffer.buffer[parser.token];
                    }
                case 47:
                    ++parser.cursor;
                    {   parser.popLevel();
                        return parser.buffer.buffer[parser.token];
                    }
                case 49:
                    yyaccept = 1;
                    yych = parser.buffer.buffer[(parser.marker = ++parser.cursor)];
                    switch (yych) {
                    case '\n':    gotoPoint = 88; break gotoNext;
                    case '\r':    gotoPoint = 92; break gotoNext;
                    case ' ':    gotoPoint = 90; break gotoNext;
                    default:    gotoPoint = 42; break gotoNext;
                    }
                case 50:
                    yyaccept = 1;
                    yych = parser.buffer.buffer[(parser.marker = ++parser.cursor)];
                    switch (yych) {
                    case '\n':    gotoPoint = 83; break gotoNext;
                    case '\r':    gotoPoint = 87; break gotoNext;
                    case ' ':    gotoPoint = 85; break gotoNext;
                    default:    gotoPoint = 42; break gotoNext;
                    }
                case 51:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '-':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'A':
                    case 'B':
                    case 'C':
                    case 'D':
                    case 'E':
                    case 'F':
                    case 'G':
                    case 'H':
                    case 'I':
                    case 'J':
                    case 'K':
                    case 'L':
                    case 'M':
                    case 'N':
                    case 'O':
                    case 'P':
                    case 'Q':
                    case 'R':
                    case 'S':
                    case 'T':
                    case 'U':
                    case 'V':
                    case 'W':
                    case 'X':
                    case 'Y':
                    case 'Z':
                    case '_':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                    case 'g':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                    case 'n':
                    case 'o':
                    case 'p':
                    case 'q':
                    case 'r':
                    case 's':
                    case 't':
                    case 'u':
                    case 'v':
                    case 'w':
                    case 'x':
                    case 'y':
                    case 'z':    gotoPoint = 80; break gotoNext;
                    default:    gotoPoint = 42; break gotoNext;
                    }
                case 52:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '-':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'A':
                    case 'B':
                    case 'C':
                    case 'D':
                    case 'E':
                    case 'F':
                    case 'G':
                    case 'H':
                    case 'I':
                    case 'J':
                    case 'K':
                    case 'L':
                    case 'M':
                    case 'N':
                    case 'O':
                    case 'P':
                    case 'Q':
                    case 'R':
                    case 'S':
                    case 'T':
                    case 'U':
                    case 'V':
                    case 'W':
                    case 'X':
                    case 'Y':
                    case 'Z':
                    case '_':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                    case 'g':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                    case 'n':
                    case 'o':
                    case 'p':
                    case 'q':
                    case 'r':
                    case 's':
                    case 't':
                    case 'u':
                    case 'v':
                    case 'w':
                    case 'x':
                    case 'y':
                    case 'z':    gotoPoint = 77; break gotoNext;
                    default:    gotoPoint = 42; break gotoNext;
                    }
                case 53:
                    ++parser.cursor;
                    {   mainLoopGoto = TransferMethod; break gotoSomething; }
                case 55:
                    ++parser.cursor;
                    {   
                        if(lvl.spaces < doc_level) {
                            if(lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap) {
                                mainLoopGoto = Document; break gotoSomething;
                            } else {
                                parser.addLevel(doc_level, LevelStatus.doc);
                                YYPOS(0);
                                return YAML_IOPEN;
                            }
                        }
                        mainLoopGoto = SingleQuote; break gotoSomething; }
                case 57:
                    ++parser.cursor;
                    {   
                        if(lvl.spaces < doc_level) {
                            if(lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap) {
                                mainLoopGoto = Document; break gotoSomething;
                            } else {
                                parser.addLevel(doc_level, LevelStatus.doc);
                                YYPOS(0);
                                return YAML_IOPEN;
                            }
                        }
                        mainLoopGoto = DoubleQuote; break gotoSomething; }
                case 59:
                    yyaccept = 1;
                    yych = parser.buffer.buffer[(parser.marker = ++parser.cursor)];
                    switch (yych) {
                    case '\n':    gotoPoint = 72; break gotoNext;
                    case '\r':    gotoPoint = 76; break gotoNext;
                    case ' ':    gotoPoint = 74; break gotoNext;
                    case '+':
                    case '-':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':    gotoPoint = 69; break gotoNext;
                    default:    gotoPoint = 42; break gotoNext;
                    }
                case 60:
                    ++parser.cursor;
                    {   eatComments(); 
                        mainLoopGoto = Document; break gotoSomething;
                    }
                case 62:
                    ++parser.cursor;
                    yych = parser.buffer.buffer[parser.cursor];
                    gotoPoint = 68; break gotoNext;
                case 63:
                    {   
                        mainLoopGoto = Document; break gotoSomething;
                    }
                case 64:
                    ++parser.cursor;
                    {   
                        if(lvl.spaces > -1) {
                            parser.popLevel();
                            YYPOS(0);
                            return YAML_IEND;
                        }
                        YYPOS(0);
                        return 0; 
                    }
                case 66:
                    yych = parser.buffer.buffer[++parser.cursor];
                    gotoPoint = 42; break gotoNext;
                case 67:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                case 68:
                    switch (yych) {
                    case '\t':
                    case ' ':    gotoPoint = 67; break gotoNext;
                    default:    gotoPoint = 63; break gotoNext;
                    }
                case 69:
                    ++parser.cursor;
                    if ((parser.limit - parser.cursor) < 2) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 72; break gotoNext;
                    case '\r':    gotoPoint = 76; break gotoNext;
                    case ' ':    gotoPoint = 74; break gotoNext;
                    case '+':
                    case '-':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':    gotoPoint = 69; break gotoNext;
                    default:    gotoPoint = 71; break gotoNext;
                    }
                case 71:
                    parser.cursor = parser.marker;
                    if (yyaccept == 0) {
                        gotoPoint = 40; break gotoNext;
                    } else {
                        gotoPoint = 42; break gotoNext;
                    }
                case 72:
                    ++parser.cursor;
                case 73:
                    {   if(isNewline(parser.cursor - 1) != 0) {
                            parser.cursor--;
                        }
                        mainLoopGoto = ScalarBlock; break gotoSomething;
                    }
                case 74:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case ' ':    gotoPoint = 74; break gotoNext;
                    default:    gotoPoint = 73; break gotoNext;
                    }
                case 76:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 72; break gotoNext;
                    default:    gotoPoint = 71; break gotoNext;
                    }
                case 77:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case '-':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'A':
                    case 'B':
                    case 'C':
                    case 'D':
                    case 'E':
                    case 'F':
                    case 'G':
                    case 'H':
                    case 'I':
                    case 'J':
                    case 'K':
                    case 'L':
                    case 'M':
                    case 'N':
                    case 'O':
                    case 'P':
                    case 'Q':
                    case 'R':
                    case 'S':
                    case 'T':
                    case 'U':
                    case 'V':
                    case 'W':
                    case 'X':
                    case 'Y':
                    case 'Z':
                    case '_':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                    case 'g':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                    case 'n':
                    case 'o':
                    case 'p':
                    case 'q':
                    case 'r':
                    case 's':
                    case 't':
                    case 'u':
                    case 'v':
                    case 'w':
                    case 'x':
                    case 'y':
                    case 'z':    gotoPoint = 77; break gotoNext;
                    default:    gotoPoint = 79; break gotoNext;
                    }
                case 79:
                    {   
                        if(lvl.spaces < doc_level) {
                            if(lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap) {
                                mainLoopGoto = Document; break gotoSomething;
                            } else {
                                parser.addLevel(doc_level, LevelStatus.doc);
                                YYPOS(0);
                                return YAML_IOPEN;
                            }
                        }
                        lval = new String(parser.buffer.buffer, parser.token + 1, parser.cursor - (parser.token + 1), "ISO-8859-1");
                        return YAML_ALIAS;
                    }
                case 80:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case '-':
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                    case 'A':
                    case 'B':
                    case 'C':
                    case 'D':
                    case 'E':
                    case 'F':
                    case 'G':
                    case 'H':
                    case 'I':
                    case 'J':
                    case 'K':
                    case 'L':
                    case 'M':
                    case 'N':
                    case 'O':
                    case 'P':
                    case 'Q':
                    case 'R':
                    case 'S':
                    case 'T':
                    case 'U':
                    case 'V':
                    case 'W':
                    case 'X':
                    case 'Y':
                    case 'Z':
                    case '_':
                    case 'a':
                    case 'b':
                    case 'c':
                    case 'd':
                    case 'e':
                    case 'f':
                    case 'g':
                    case 'h':
                    case 'i':
                    case 'j':
                    case 'k':
                    case 'l':
                    case 'm':
                    case 'n':
                    case 'o':
                    case 'p':
                    case 'q':
                    case 'r':
                    case 's':
                    case 't':
                    case 'u':
                    case 'v':
                    case 'w':
                    case 'x':
                    case 'y':
                    case 'z':    gotoPoint = 80; break gotoNext;
                    default:    gotoPoint = 82; break gotoNext;
                    }
                case 82:
                    {   lval = new String(parser.buffer.buffer, parser.token + 1, parser.cursor - (parser.token + 1), "ISO-8859-1");

                        /*
                         * Remove previous anchors of the same name.  Since the parser will likely
                         * construct deeper nodes first, we want those nodes to be placed in the
                         * queue for matching at a higher level of indentation.
                         */
                        parser.removeAnchor((String)lval);
                        return YAML_ANCHOR;
                    }
                case 83:
                    ++parser.cursor;
                case 84:
                    {   
                        if(lvl.spaces < (parser.token - parser.lineptr)) {
                            if(lvl.status == LevelStatus.iseq || lvl.status == LevelStatus.imap) {
                                mainLoopGoto = Document; break gotoSomething;
                            } else {
                                parser.addLevel((parser.token - parser.lineptr), LevelStatus.doc);
                                YYPOS(0);
                                return YAML_IOPEN;
                            }
                        }
                        parser.force_token = YAML_IOPEN;
                        if( parser.buffer.buffer[parser.cursor] == '#' || isNewline(parser.cursor) != 0 || isNewline(parser.cursor-1) != 0) {
                            parser.cursor--;
                            parser.addLevel(parser.token + 1 - parser.lineptr, LevelStatus.seq);
                        } else /* spaces followed by content uses the space as indentation */
                        {
                            parser.addLevel(parser.cursor - parser.lineptr, LevelStatus.seq);
                        }
                        return parser.buffer.buffer[parser.token];
                    }
                case 85:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case ' ':    gotoPoint = 85; break gotoNext;
                    default:    gotoPoint = 84; break gotoNext;
                    }
                case 87:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 83; break gotoNext;
                    default:    gotoPoint = 71; break gotoNext;
                    }
                case 88:
                    ++parser.cursor;
                case 89:
                    {   if( parser.buffer.buffer[parser.token] == ':' && lvl.status != LevelStatus.imap && lvl.status != LevelStatus.iseq ) {
                            lvl.status = LevelStatus.map;
                        }
                        YYPOS(1); 
                        return parser.buffer.buffer[parser.token];
                    }
                case 90:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case ' ':    gotoPoint = 90; break gotoNext;
                    default:    gotoPoint = 89; break gotoNext;
                    }
                case 92:
                    yych = parser.buffer.buffer[++parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 88; break gotoNext;
                    default:    gotoPoint = 71; break gotoNext;
                    }
                case 93:
                    yyaccept = 0;
                    parser.marker = ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                case 94:
                    switch (yych) {
                    case '\t':    gotoPoint = 93; break gotoNext;
                    case '\n':
                    case ' ':    gotoPoint = 95; break gotoNext;
                    case '\r':    gotoPoint = 97; break gotoNext;
                    default:    gotoPoint = 40; break gotoNext;
                    }
                case 95:
                    yyaccept = 0;
                    parser.marker = ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case '\n':
                    case ' ':    gotoPoint = 95; break gotoNext;
                    case '\r':    gotoPoint = 97; break gotoNext;
                    default:    gotoPoint = 40; break gotoNext;
                    }
                case 97:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 95; break gotoNext;
                    default:    gotoPoint = 71; break gotoNext;
                    }
                }
            }
        }



                }
                case Directive:
                case Plain:
                case Plain2:
                case Plain3:
                case SingleQuote:
                case SingleQuote2:
                case DoubleQuote:
                case DoubleQuote2:
                case TransferMethod:
                case TransferMethod2:
                case ScalarBlock:
                case ScalarBlock2:
                }
                return 0;                
            }
        } while(true);
   }

   private void eatComments() throws IOException {
     comment: while(true) {
       parser.token = parser.cursor;

        int gotoPoint = -1;
        byte yych = (byte) 0;
        while(true) {
            gotoNext: while(true) {
                switch(gotoPoint) {
                case -1: 
                    if ((parser.limit - parser.cursor) < 2) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case 0x00:    gotoPoint = 100; break gotoNext;
                    case '\n':    gotoPoint = 102; break gotoNext;
                    case '\r':    gotoPoint = 103; break gotoNext;
                    default:    gotoPoint = 105; break gotoNext;
                    }
                case 100:
                    ++parser.cursor;
                case 101:
                    {   parser.cursor = parser.token;
                        return;
                    }
                case 102:
                    yych = parser.buffer.buffer[(parser.marker = ++parser.cursor)];
                    gotoPoint = 107; break gotoNext;
                case 103:
                    ++parser.cursor;
                    switch ((yych = parser.buffer.buffer[parser.cursor])) {
                    case '\n':    gotoPoint = 106; break gotoNext;
                    default:    gotoPoint = 104; break gotoNext;
                    }
                case 104:
                    {   continue comment; 
                    }
                case 105:
                    yych = parser.buffer.buffer[++parser.cursor];
                    gotoPoint = 104; break gotoNext;
                case 106:
                    parser.marker = ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                case 107:
                    switch (yych) {
                    case '\n':    gotoPoint = 106; break gotoNext;
                    case '\r':    gotoPoint = 108; break gotoNext;
                    default:    gotoPoint = 101; break gotoNext;
                    }
                case 108:
                    ++parser.cursor;
                    if (parser.limit <= parser.cursor) parser.read();
                    yych = parser.buffer.buffer[parser.cursor];
                    switch (yych) {
                    case '\n':    gotoPoint = 106; break gotoNext;
                    default:    gotoPoint = 109; break gotoNext;
                    }
                case 109:
                    parser.cursor = parser.marker;
                    gotoPoint = 101; break gotoNext;
                }
            }
        }

    }
  }
}
